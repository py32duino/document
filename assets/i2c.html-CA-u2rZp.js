import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as t,c,a as n,b as s,d as o,e as i}from"./app-fbiCp83H.js";const u={},l=n("h2",{id:"关于",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于","aria-hidden":"true"},"#"),s(" 关于")],-1),d=n("p",null,"I2C（Inter-Integrated Circuit）/TWI（Two-wire Interface）是一种广泛使用的串行通信，用于短距离连接设备。这是用于连接传感器、EEPROM、RTC、ADC、DAC、显示器、OLED 以及许多其他设备和微控制器的最常见外设之一。",-1),r=n("p",null,"这种串行通信被视为低速总线，多个设备可以连接在同一条两线总线上，每个设备都有一个唯一的 7 位地址（最多 128 个设备）。这两根线称为SDA（串行数据线）和SCL（串行时钟线）。",-1),k=n("div",{class:"hint-container note"},[n("p",{class:"hint-container-title"},"注"),n("p",null,"SDA 和SCL 线需要上拉电阻。有关电阻值和工作电压的更多详细信息，请参阅器件数据表。")],-1),v={href:"https://www.arduino.cc/en/reference/wire",target:"_blank",rel:"noopener noreferrer"},m=i(`<h2 id="i2c-模式" tabindex="-1"><a class="header-anchor" href="#i2c-模式" aria-hidden="true">#</a> I2C 模式</h2><p>I2C 可用于两种不同的模式：</p><ul><li><p>主模式</p><ul><li>在此模式下，PY32Duino 生成时钟信号并发起与从设备的通信。</li></ul></li><li><p>从模式</p><ul><li>从机模式，时钟由主设备产生，如果目的地址与目的设备相同则响应主设备。</li></ul></li></ul><h2 id="i2c-通用-api" tabindex="-1"><a class="header-anchor" href="#i2c-通用-api" aria-hidden="true">#</a> I2C 通用 API</h2><p>以下是主模式和从模式下使用的常用功能。</p><h3 id="begin" tabindex="-1"><a class="header-anchor" href="#begin" aria-hidden="true">#</a> begin</h3><p>该函数用于使用默认配置启动外设。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果外设正确初始化，此函数将返回 <code>true</code> 。</p><h3 id="setsda" tabindex="-1"><a class="header-anchor" href="#setsda" aria-hidden="true">#</a> setSDA</h3><p>该函数用于设置 SDA 引脚。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setSDA</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>pin</code>：SDA 引脚。</li></ul><p>或者</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setSDA</span><span class="token punctuation">(</span>PinName sda<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="setscl" tabindex="-1"><a class="header-anchor" href="#setscl" aria-hidden="true">#</a> setSCL</h3><p>该函数用于设置 SCL 引脚。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setSCL</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>pin</code>：SCL 引脚。</li></ul><p>或者</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setSCL</span><span class="token punctuation">(</span>PinName scl<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>setSDA</code> 和 <code>setSCL</code> 函数必须在 <code>begin</code> 函数之前调用。</p></div><h3 id="setclock" tabindex="-1"><a class="header-anchor" href="#setclock" aria-hidden="true">#</a> setClock</h3><p>该函数用于设置 I2C 时钟频率。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setClock</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> frequency<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>frequency</code>：I2C 时钟频率。</li></ul><h3 id="write" tabindex="-1"><a class="header-anchor" href="#write" aria-hidden="true">#</a> write</h3><p>该函数将数据写入缓冲区。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>size_t <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>data</code>：要写入的数据。</li></ul><p>或者</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>size_t <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>data</code>：要写入的数据。</li><li><code>len</code>：要写入的数据数量。</li></ul><h3 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> end</h3><p>该函数用于停止 I2C 通信。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用 <code>end</code> 后，您需要再次使用 <code>begin</code> 以再次初始化I2C驱动程序。</p><h2 id="i2c-主模式" tabindex="-1"><a class="header-anchor" href="#i2c-主模式" aria-hidden="true">#</a> I2C 主模式</h2><p>该模式用于启动与从机的通信。</p><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法：</h3><p>要开始在 Arduino 上使用 I2C 主模式，第一步是将 <code>Wire.h</code> 头文件引入到你的代码中。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，我们可以通过调用 begin 函数来开始外设配置。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Wire<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过使用不带任何参数的 <code>begin</code> ，所有设置都将使用默认值完成。如需自行设置值，请参阅函数说明。</p><p>调用 <code>begin</code> 后，我们可以通过调用 <code>beginTransmission</code> 并传递 I2C 从机地址来开始传输：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Wire<span class="token punctuation">.</span><span class="token function">beginTransmission</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要将一些字节写入从设备，请使用 <code>write</code> 函数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Wire<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>您可以使用 <code>write</code> 函数传递不同的数据类型。</p><p>要结束传输，请使用 <code>endTransmission</code> 函数。</p><div class="hint-container note"><p class="hint-container-title">注</p><p><code>write</code> 函数不会直接写入从设备，而是添加到I2C缓冲区。为此，您需要使用 endTransmission 函数将缓冲的字节发送到从设备。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Wire<span class="token punctuation">.</span><span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>调用 <code>endTransmission</code> 后，I2C缓冲区中存储的数据将被传输到从设备。</p><p>现在您可以请求从从设备读取数据。 <code>requestFrom</code> 将要求通过提供地址和大小来读取所选设备的数据。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Wire<span class="token punctuation">.</span><span class="token function">requestFrom</span><span class="token punctuation">(</span>I2C_DEV_ADDR<span class="token punctuation">,</span> SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>readBytes</code> 将读取它。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Wire<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="i2c-主机-api" tabindex="-1"><a class="header-anchor" href="#i2c-主机-api" aria-hidden="true">#</a> I2C 主机 API</h2><p>以下是 I2C 主机 API。这些功能仅用于主模式。</p><h3 id="begin-1" tabindex="-1"><a class="header-anchor" href="#begin-1" aria-hidden="true">#</a> begin</h3><p>您可以使用不带任何参数的 <code>begin</code> 函数来使用所有默认值。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，您可以指定您使用的 SDA 和 SCL 引脚。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> sda<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> scl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="begintransmission" tabindex="-1"><a class="header-anchor" href="#begintransmission" aria-hidden="true">#</a> beginTransmission</h3><p>该函数用于启动 I2C 传输。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">beginTransmission</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数用于启动与从设备的通信过程。在将消息写入缓冲区之前，通过传递从属 <code>address</code> 来调用此函数。</p><h3 id="endtransmission" tabindex="-1"><a class="header-anchor" href="#endtransmission" aria-hidden="true">#</a> endTransmission</h3><p>使用i2c write写入缓冲区后，使用函数 <code>endTransmission</code> 将消息发送到 <code>beginTransmission</code> 函数上定义的从设备地址。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">uint8_t</span> <span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token keyword">bool</span> stopBit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>stopBit</code>：如果为 <code>true</code> ，则发送停止位。</li></ul><p>在没有 <code>sendStop</code> 的情况下调用此函数相当于 <code>sendStop = true</code> 。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">uint8_t</span> <span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数将返回错误代码。</p><h3 id="requestfrom" tabindex="-1"><a class="header-anchor" href="#requestfrom" aria-hidden="true">#</a> requestFrom</h3><p>要从从设备读取，请使用 <code>requestFrom</code> 函数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">uint8_t</span> <span class="token function">requestFrom</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> address<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> quantity<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> iaddress<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> isize<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> sendStop<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>address</code>：从设备地址。</li><li><code>quantity</code>：要读取的字节数。</li><li><code>iaddress</code>：内部地址。</li><li><code>isize</code>：内部地址大小。</li><li><code>sendStop</code>：如果为 <code>true</code> ，则发送停止位。</li></ul><p>或者，您可以使用</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">uint8_t</span> <span class="token function">requestFrom</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> address<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> quantity<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> sendStop<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数将调用 <code>requestFrom</code> ，并将 <code>iaddress</code> 和 <code>isize</code> 设置为 <code>0</code> 。</p><p>或者，您可以使用</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">uint8_t</span> <span class="token function">requestFrom</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> address<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> quantity<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此函数将调用 <code>requestFrom</code> ，并将 <code>iaddress</code> 和 <code>isize</code> 设置为 <code>0</code> ，并将 <code>sendStop</code> 设置为 <code>true</code> 。</p><h3 id="示例应用程序" tabindex="-1"><a class="header-anchor" href="#示例应用程序" aria-hidden="true">#</a> 示例应用程序</h3><p>以下是如何在主模式下使用 I2C 的示例。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Wire.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_DEV_ADDR</span> <span class="token expression"><span class="token number">0x55</span></span></span>

<span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">setDebugOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Wire<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//Write message to the slave</span>
  Wire<span class="token punctuation">.</span><span class="token function">beginTransmission</span><span class="token punctuation">(</span>I2C_DEV_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Wire<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World! %u&quot;</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">uint8_t</span> error <span class="token operator">=</span> Wire<span class="token punctuation">.</span><span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;endTransmission: %u\\n&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">//Read 16 bytes from the slave</span>
  <span class="token keyword">uint8_t</span> bytesReceived <span class="token operator">=</span> Wire<span class="token punctuation">.</span><span class="token function">requestFrom</span><span class="token punctuation">(</span>I2C_DEV_ADDR<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;requestFrom: %u\\n&quot;</span><span class="token punctuation">,</span> bytesReceived<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">)</span>bytesReceived<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//If received more than zero bytes</span>
    <span class="token keyword">uint8_t</span> temp<span class="token punctuation">[</span>bytesReceived<span class="token punctuation">]</span><span class="token punctuation">;</span>
    Wire<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> bytesReceived<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">log_print_buf</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> bytesReceived<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="i2c-从机模式" tabindex="-1"><a class="header-anchor" href="#i2c-从机模式" aria-hidden="true">#</a> I2C 从机模式</h2><p>该模式用于接受来自主机的通信。</p><h3 id="基本用法-1" tabindex="-1"><a class="header-anchor" href="#基本用法-1" aria-hidden="true">#</a> 基本用法</h3><p>要开始在 Arduino 上使用 I2C 作为从模式，第一步是将 <code>Wire.h</code> 头文件引入到你的代码中。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在调用 <code>begin</code> 之前，我们必须创建两个回调函数来处理与主设备的通信。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Wire<span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>onReceive<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>和</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Wire<span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span>onRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>onReceive</code> 将根据从属设备读取请求处理来自主设备的请求， <code>onRequest</code> 将处理对主设备的应答。</p><p>现在，我们可以通过使用设备地址调用 <code>begin</code> 函数来开始外设配置。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Wire<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>I2C_DEV_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过使用不带任何参数的 <code>begin</code> ，所有设置都将使用默认值完成。如需自行设置值，请参阅函数说明。</p><h2 id="i2c-从机-api" tabindex="-1"><a class="header-anchor" href="#i2c-从机-api" aria-hidden="true">#</a> I2C 从机 API</h2><h3 id="begin-2" tabindex="-1"><a class="header-anchor" href="#begin-2" aria-hidden="true">#</a> begin</h3><p>在从机模式下，必须通过传递从机地址来使用 <code>begin</code> 函数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">TwoWire</span><span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token keyword">uint8_t</span> address<span class="token punctuation">,</span> <span class="token keyword">bool</span> generalCall<span class="token punctuation">,</span> <span class="token keyword">bool</span> NoStretchMode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>address</code>：从机地址。</li><li><code>generalCall</code>：如果为 <code>true</code> ，则启用广播地址。</li><li><code>NoStretchMode</code>：如果为 <code>true</code> ，则禁用时钟拉伸。</li></ul><h3 id="onreceive" tabindex="-1"><a class="header-anchor" href="#onreceive" aria-hidden="true">#</a> onReceive</h3><p><code>onReceive</code> 函数用于定义从主机接收到的数据的回调。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>cb_function_receive_t callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="onrequest" tabindex="-1"><a class="header-anchor" href="#onrequest" aria-hidden="true">#</a> onRequest</h3><p><code>onRequest</code> 函数用于定义要发送到主机的数据的回调。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">onRequest</span><span class="token punctuation">(</span>cb_function_request_t callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="示例应用程序-1" tabindex="-1"><a class="header-anchor" href="#示例应用程序-1" aria-hidden="true">#</a> 示例应用程序</h3><p>以下是如何在从模式下使用 I2C 的示例。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">I2C_ADDR</span>  <span class="token expression"><span class="token number">2</span></span></span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Wire<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span>I2C_ADDR<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// join i2c bus with address #4</span>
  Wire<span class="token punctuation">.</span><span class="token function">onRequest</span><span class="token punctuation">(</span>requestEvent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// register event</span>
  Wire<span class="token punctuation">.</span><span class="token function">onReceive</span><span class="token punctuation">(</span>receiveEvent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// register event</span>
  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// start serial for output</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//empty loop</span>
<span class="token punctuation">}</span>

<span class="token comment">// function that executes whenever data is received from master</span>
<span class="token comment">// this function is registered as an event, see setup()</span>
<span class="token keyword">void</span> <span class="token function">receiveEvent</span><span class="token punctuation">(</span><span class="token keyword">int</span> howMany<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> Wire<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// loop through all but the last</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> Wire<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// receive byte as a character</span>
    Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// print the character</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">int</span> x <span class="token operator">=</span> Wire<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// receive byte as an integer</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// print the integer</span>
<span class="token punctuation">}</span>

<span class="token comment">// function that executes whenever data is requested by master</span>
<span class="token comment">// this function is registered as an event, see setup()</span>
<span class="token keyword">void</span> <span class="token function">requestEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  Wire<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// respond with message of 6 bytes</span>
                          <span class="token comment">// as expected by master</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进阶用法" tabindex="-1"><a class="header-anchor" href="#进阶用法" aria-hidden="true">#</a> 进阶用法</h2><p>默认情况下，只有一个 Wire 实例可用，它使用了默认的I2C引脚，具体可以参考开发板的手册。要使用第二个 I2C 端口，应在代码中在 <code>setup()</code> 函数之前声明 <code>TwoWire</code> 对象：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Wire.h&gt;</span></span>

TwoWire <span class="token function">Wire2</span><span class="token punctuation">(</span>SDA_PIN<span class="token punctuation">,</span> SCL_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Wire2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Wire2<span class="token punctuation">.</span><span class="token function">beginTransmission</span><span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Wire2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;v&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Wire2<span class="token punctuation">.</span><span class="token function">endTransmission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="默认-i2c-引脚" tabindex="-1"><a class="header-anchor" href="#默认-i2c-引脚" aria-hidden="true">#</a> 默认 I2C 引脚</h3><p>默认 I2C 接口引脚在 <code>PeripheralPins.c</code> 文件中配置。</p><p>示例（对于文件 PeripheralPins.c 中的 <code>AIR001_DEV</code>）：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">HAL_I2C_MODULE_ENABLED</span></span>
WEAK <span class="token keyword">const</span> PinMap PinMap_I2C_SDA<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">{</span>PA_2<span class="token punctuation">,</span>  I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF12_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PA_7<span class="token punctuation">,</span>  I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF12_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PA_9<span class="token punctuation">,</span>  I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF12_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PA_10<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF6_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PA_12<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF6_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PB_7<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF6_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PB_8<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF12_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PF_0<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF12_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>NC<span class="token punctuation">,</span>    NP<span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">HAL_I2C_MODULE_ENABLED</span></span>
WEAK <span class="token keyword">const</span> PinMap PinMap_I2C_SCL<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">{</span>PA_3<span class="token punctuation">,</span>  I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF12_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PA_8<span class="token punctuation">,</span>  I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF12_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PA_9<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF6_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PA_10<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF12_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PA_11<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF6_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PB_6<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF6_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PB_8<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF6_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>PF_1<span class="token punctuation">,</span> I2C<span class="token punctuation">,</span> <span class="token function">AIR_PIN_DATA</span><span class="token punctuation">(</span>AIR_MODE_AF_OD<span class="token punctuation">,</span> GPIO_NOPULL<span class="token punctuation">,</span> GPIO_AF12_I2C<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>NC<span class="token punctuation">,</span>    NP<span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="重新定义i2c引脚" tabindex="-1"><a class="header-anchor" href="#重新定义i2c引脚" aria-hidden="true">#</a> 重新定义I2C引脚</h3><p>因为它们被定义为 WEAK，所以您可以在代码文件中重新定义它们，而不是更改 <code>PeripheralPins.c</code> 文件中的值。您还可以使用 <code>AIR_PIN_DATA()</code> 的第二个参数启用/禁用内部上拉电阻。</p><h3 id="i2c-缓冲区管理" tabindex="-1"><a class="header-anchor" href="#i2c-缓冲区管理" aria-hidden="true">#</a> I2C 缓冲区管理</h3><p>默认情况下，I2C 缓冲区都在 Arduino API 上对齐：32 字节。</p><p>但是我们最多可以传输 255 个字节：</p><ul><li><p>在主模式下：RX 和 TX 缓冲区将在需要时自动增长，彼此独立，并且独立于其他 I2C 实例。</p><p>从应用程序的角度来看无事可做。</p></li><li><p>在从模式下：借助开关 I2C_TXRX_BUFFER_SIZE ，可以使用 hal_conf_extra.h 或 build_opt.h （在编译时）静态重新定义 RX 和 TX 缓冲区大小</p><p>所有 I2C 实例都受此编译开关更改的影响。</p></li></ul>`,129);function b(h,_){const a=p("ExternalLinkIcon");return t(),c("div",null,[l,d,r,k,n("p",null,[s("PY32Duino I2C 库基于 "),n("a",v,[s("Arduino Wire 库"),o(a)]),s("，并实现了更多 API，如本文档中所述。")]),m])}const f=e(u,[["render",b],["__file","i2c.html.vue"]]);export{f as default};
