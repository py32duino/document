import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o,c,a as n,b as s,d as a,e as d}from"./app-fbiCp83H.js";const p={},l=n("h2",{id:"关于",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关于","aria-hidden":"true"},"#"),s(" 关于")],-1),r=n("p",null,"SPI，即Serial Peripheral Interface Bus（串行外设接口），是一种用于芯片通信的同步串行通信接口规范，主要应用于单片机系统中。类似I²C。 这种接口首先由摩托罗拉公司于20世纪80年代中期开发，后发展成了行业规范。它的典型应用有闪存、EEPROM、SD卡与液晶显示器。",-1),u=n("p",null,"SPI设备之间使用全双工模式通信，是一个主机和一个或多个从机的主从模式。主机负责初始化帧，这个数据传输帧可以用于读与写两种操作，片选线路可以从多个从机选择一个来响应主机的请求。",-1),S=n("p",null,"有时SPI接口被称作四线式接口，这是为了与其他不同线制的数据传输接口加以区分。SPI准确来讲应为“同步串行接口”，但是它又与同步串行接口协议（SSI）是完全不同的两种协议。虽然SSI也是一个四线式同步通信协议，但是它使用差分信号，而且仅提供一个单工通信信道。于此相对地，SPI是一个单主机多从机的通信接口。",-1),h=n("p",null,"SPI是一种事实标准，也就是说这种规范没有对应的技术标准。因此各个厂家生产的SPI器件配置不一样，不一定有互操作性。",-1),m=n("h2",{id:"arduino-api-参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#arduino-api-参考","aria-hidden":"true"},"#"),s(" Arduino API 参考")],-1),_={href:"https://www.arduino.cc/reference/en/language/functions/communication/spi/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://docs.arduino.cc/learn/communication/spi",target:"_blank",rel:"noopener noreferrer"},f=d(`<h2 id="py32duino-专用api" tabindex="-1"><a class="header-anchor" href="#py32duino-专用api" aria-hidden="true">#</a> PY32Duino 专用API</h2><p>PY32Duino SPI 库已经过修改，可以在不停止 SPI 接口的情况下管理多个 CS 引脚。</p><p>我们为用户提供了 3 种关于 CS 引脚管理的可能性：</p><ul><li>CS 引脚在传输数据之前由用户代码直接管理（如 Arduino SPI 库）</li><li>或者用户将 CS pin 号提供给库 API，库自行管理 CS pin（参见下面的示例）</li><li>或者用户使用链接到 SPI 外设的硬件 CS 引脚</li></ul><h3 id="spiclass-spiclass-uint8-t-mosi-uint8-t-miso-uint8-t-sclk-uint8-t-ssel" tabindex="-1"><a class="header-anchor" href="#spiclass-spiclass-uint8-t-mosi-uint8-t-miso-uint8-t-sclk-uint8-t-ssel" aria-hidden="true">#</a> SPIClass::SPIClass(uint8_t mosi, uint8_t miso, uint8_t sclk, uint8_t ssel)</h3><p>构造函数，用于初始化 SPI 外设，参数为 SPI 外设的引脚号。</p><ul><li><code>mosi</code>：MOSI 引脚号</li><li><code>miso</code>：MISO 引脚号</li><li><code>sclk</code>：SCLK 引脚号</li><li><code>ssel</code>：CS 引脚号，该引脚必须是硬件 CS 引脚。如果配置该引脚，片选将由 SPI 外设管理。请勿在参数中使用带有 CS 引脚的 API 函数。</li></ul><h3 id="void-spiclass-begin-uint8-t-pin" tabindex="-1"><a class="header-anchor" href="#void-spiclass-begin-uint8-t-pin" aria-hidden="true">#</a> void SPIClass::begin(uint8_t _pin)</h3><p>初始化 SPI 外设。</p><ul><li><code>_pin</code>：CS 引脚号，由 SPI 库管理。</li></ul><h3 id="void-begintransaction-uint8-t-pin-spisettings-settings" tabindex="-1"><a class="header-anchor" href="#void-begintransaction-uint8-t-pin-spisettings-settings" aria-hidden="true">#</a> void beginTransaction(uint8_t pin, SPISettings settings)</h3><p>允许使用其他参数配置SPI。这些新参数保存在关联的 CS 引脚上。</p><ul><li><code>pin</code>：CS 引脚号，由 SPI 库管理。</li><li><code>settings</code>：SPI 设置，包括速率、位顺序和数据模式。</li></ul><h3 id="void-endtransaction-uint8-t-pin" tabindex="-1"><a class="header-anchor" href="#void-endtransaction-uint8-t-pin" aria-hidden="true">#</a> void endTransaction(uint8_t pin)</h3><p>删除 CS 引脚和关联的 SPI 设置</p><ul><li><code>pin</code>：CS 引脚号，由 SPI 库管理。</li></ul><div class="hint-container note"><p class="hint-container-title">注</p><p>使用 <code>begin()</code> 或 <code>beginTransaction()</code> 初始化 SPI 实例后，必须调用以下函数。<br> 如果要管理多个设备，可以多次调用 <code>beginTransaction()</code>，并在参数中包含不同的 CS 引脚。<br> 然后，您可以使用不同的 CS 引脚调用以下函数，而无需再次调用 <code>beginTransaction()</code>（直到调用 <code>end()</code> 或 <code>endTransaction()</code>）。</p></div><div class="hint-container note"><p class="hint-container-title">注</p><p>如果模式设置为 SPI_CONTINUE，CS 引脚将保持启用状态。使用多个 CS 引脚时要小心。</p></div><h3 id="byte-transfer-uint8-t-pin-uint8-t-data-spitransfermode-mode-spi-last" tabindex="-1"><a class="header-anchor" href="#byte-transfer-uint8-t-pin-uint8-t-data-spitransfermode-mode-spi-last" aria-hidden="true">#</a> byte transfer(uint8_t pin, uint8_t _data, SPITransferMode _mode = SPI_LAST)</h3><p>写入/读取一个字节</p><ul><li><code>pin</code>： CS 引脚，由 SPI 库管理</li><li><code>data</code>：要写入的参数</li><li><code>mode</code>：（可选）如果 SPI_LAST mode CS 引脚复位， SPI_CONTINUE mode CS 引脚保持启用状态。返回接收到的数据</li></ul><h3 id="uint16-t-transfer16-uint8-t-pin-uint16-t-data-spitransfermode-mode-spi-last" tabindex="-1"><a class="header-anchor" href="#uint16-t-transfer16-uint8-t-pin-uint16-t-data-spitransfermode-mode-spi-last" aria-hidden="true">#</a> uint16_t transfer16(uint8_t pin, uint16_t _data, SPITransferMode _mode = SPI_LAST)</h3><p>写/读半字</p><ul><li><code>pin</code>： CS 引脚，由 SPI 库管理</li><li><code>data</code>：要写入的参数</li><li><code>mode</code>：（可选）如果 SPI_LAST mode CS 引脚复位， SPI_CONTINUE mode CS 引脚保持启用状态。返回接收到的数据</li></ul><h3 id="void-transfer-uint8-t-pin-void-buf-size-t-count-spitransfermode-mode-spi-last" tabindex="-1"><a class="header-anchor" href="#void-transfer-uint8-t-pin-void-buf-size-t-count-spitransfermode-mode-spi-last" aria-hidden="true">#</a> void transfer(uint8_t pin, void *_buf, size_t _count, SPITransferMode _mode = SPI_LAST)</h3><p>写入/读取几个字节。仅使用一个缓冲区来写入和读取数据</p><ul><li><code>pin</code>： CS 引脚，由 SPI 库管理</li><li><code>buf</code>：指向要写入的数据的指针</li><li><code>count</code>：要写入/读取的数据数量</li><li><code>mode</code>：（可选）如果 SPI_LAST mode CS 引脚复位， SPI_CONTINUE mode CS 引脚保持启用状态。</li></ul><h3 id="void-transfer-byte-pin-void-bufout-void-bufin-size-t-count-spitransfermode-mode-spi-last" tabindex="-1"><a class="header-anchor" href="#void-transfer-byte-pin-void-bufout-void-bufin-size-t-count-spitransfermode-mode-spi-last" aria-hidden="true">#</a> void transfer(byte _pin, void *_bufout, void *_bufin, size_t _count, SPITransferMode _mode = SPI_LAST)</h3><p>写入/读取几个字节。一个用于输出数据的缓冲区，一个用于输入数据的缓冲区</p><ul><li><code>pin</code>： CS 引脚，由 SPI 库管理</li><li><code>bufout</code>：指向要写入的数据的指针</li><li><code>bufin</code>：指向要读取的数据的指针</li><li><code>count</code>：要写入/读取的数据数量</li><li><code>mode</code>：（可选）如果 SPI_LAST mode CS 引脚复位， SPI_CONTINUE mode CS 引脚保持启用状态。</li></ul><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><p>这是使用 CS 引脚管理的示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;SPI.h&gt;</span></span>
<span class="token comment">//            MOSI  MISO  SCLK</span>
SPIClass <span class="token function">SPI_3</span><span class="token punctuation">(</span>PC12<span class="token punctuation">,</span> PC11<span class="token punctuation">,</span> PC10<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  SPI_3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Enables the SPI_3 instance with default settings and attaches the CS pin  </span>
  SPI_3<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> settings<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Attaches another CS pin and configure the SPI_3 instance with other settings  </span>
  SPI_3<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Transfers data to the first device</span>
  SPI_3<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Transfers data to the second device. The SPI_3 instance is configured with the right settings  </span>
  SPI_3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//SPI_3 instance is disabled</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更改默认-spi-实例引脚" tabindex="-1"><a class="header-anchor" href="#更改默认-spi-实例引脚" aria-hidden="true">#</a> 更改默认 SPI 实例引脚</h2><p>还可以使用下列 API 更改 <code>SPI</code> 实例使用的默认引脚：</p><ul><li><code>void setMISO(uint32_t miso)</code></li><li><code>void setMOSI(uint32_t mosi)</code></li><li><code>void setSCLK(uint32_t sclk)</code></li><li><code>void setSSEL(uint32_t ssel)</code></li><li><code>void setMISO(PinName miso)</code></li><li><code>void setMOSI(PinName mosi)</code></li><li><code>void setSCLK(PinName sclk)</code></li><li><code>void setSSEL(PinName ssel)</code></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这些 API 必须在调用 <code>begin()</code> 之前调用。</p></div>`,37);function P(v,b){const e=t("ExternalLinkIcon");return o(),c("div",null,[l,r,u,S,h,m,n("p",null,[n("a",_,[s("SPI Reference"),a(e)])]),n("p",null,[n("a",I,[s("SPI Description"),a(e)])]),f])}const g=i(p,[["render",P],["__file","spi.html.vue"]]);export{g as default};
