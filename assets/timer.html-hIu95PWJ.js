import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-fbiCp83H.js";const e={},p=t(`<p><code>HardwareTimer</code>库旨在提供对部分PY32Duino硬件定时器功能的访问（如果需要其他功能，可以通过HAL/LL访问它们）。</p><p>使用该库假设您对 PY32Duino 硬件定时器架构有一些基本了解。首先提醒一下，所有定时器并不等同，也不支持相同的功能。请参阅您的 MCU 的参考手册。</p><p>一些例子：</p><ol><li><code>TIM6</code> 和 <code>TIM7</code> 没有输出的引脚，这就是为什么在可用时，它们被用于实现 <code>Tone</code> 和 <code>Servo</code>。</li><li>有些定时器有多达 4 个输出通道，其中有 4 个互补通道，而其他定时器则没有互补通道，或者只有 1 或 2 个通道...</li></ol><p>每个定时器可以提供多个通道，但是重要的是要理解同一定时器的所有通道共享相同的计数器，因此具有相同的周期/频率。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>出于通用性目的，<code>HardwareTimer</code> 库使用所有定时器，如 16 位定时器（即使有些定时器的位数更多）。</p></div><h2 id="api接口" tabindex="-1"><a class="header-anchor" href="#api接口" aria-hidden="true">#</a> API接口</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token keyword">void</span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Pause counter and all output channels</span>
    <span class="token keyword">void</span> <span class="token function">pauseChannel</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Timer is still running but channel (output and interrupt) is disabled</span>
    <span class="token keyword">void</span> <span class="token function">resume</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resume counter and all output channels</span>
    <span class="token keyword">void</span> <span class="token function">resumeChannel</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Resume only one channel</span>

    <span class="token keyword">void</span> <span class="token function">setPrescaleFactor</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> prescaler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set prescaler register (which is factor value - 1)</span>
    <span class="token keyword">uint32_t</span> <span class="token function">getPrescaleFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> val<span class="token punctuation">,</span> TimerFormat_t format <span class="token operator">=</span> TICK_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set AutoReload register depending on format provided</span>
    <span class="token keyword">uint32_t</span> <span class="token function">getOverflow</span><span class="token punctuation">(</span>TimerFormat_t format <span class="token operator">=</span> TICK_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return overflow depending on format provided</span>

    <span class="token keyword">void</span> <span class="token function">setPWM</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">,</span> PinName pin<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> frequency<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> dutycycle<span class="token punctuation">,</span> callback_function_t PeriodCallback <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> callback_function_t CompareCallback <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set all in one command freq in HZ, Duty in percentage. Including both interrup.</span>
    <span class="token keyword">void</span> <span class="token function">setPWM</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> pin<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> frequency<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> dutycycle<span class="token punctuation">,</span> callback_function_t PeriodCallback <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> callback_function_t CompareCallback <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> val<span class="token punctuation">,</span> TimerFormat_t format <span class="token operator">=</span> TICK_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set timer counter to value &#39;val&#39; depending on format provided</span>
    <span class="token keyword">uint32_t</span> <span class="token function">getCount</span><span class="token punctuation">(</span>TimerFormat_t format <span class="token operator">=</span> TICK_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return current counter value of timer depending on format provided</span>

    <span class="token keyword">void</span> <span class="token function">setMode</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">,</span> TimerModes_t mode<span class="token punctuation">,</span> PinName pin <span class="token operator">=</span> NC<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Configure timer channel with specified mode on specified pin if available</span>
    <span class="token keyword">void</span> <span class="token function">setMode</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">,</span> TimerModes_t mode<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>

    TimerModes_t <span class="token function">getMode</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Retrieve configured mode</span>

    <span class="token keyword">void</span> <span class="token function">setPreloadEnable</span><span class="token punctuation">(</span><span class="token keyword">bool</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Configure overflow preload enable setting</span>

    <span class="token keyword">uint32_t</span> <span class="token function">getCaptureCompare</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">,</span> TimerCompareFormat_t format <span class="token operator">=</span> TICK_COMPARE_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return Capture/Compare register value of specified channel depending on format provided</span>
    <span class="token keyword">void</span> <span class="token function">setCaptureCompare</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> compare<span class="token punctuation">,</span> TimerCompareFormat_t format <span class="token operator">=</span> TICK_COMPARE_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// set Compare register value of specified channel depending on format provided</span>

    <span class="token keyword">void</span> <span class="token function">setInterruptPriority</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> preemptPriority<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> subPriority<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set interrupt priority</span>

    <span class="token comment">//Add interrupt to period update</span>
    <span class="token keyword">void</span> <span class="token function">attachInterrupt</span><span class="token punctuation">(</span>callback_function_t callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Attach interrupt callback which will be called upon update event (timer rollover)</span>
    <span class="token keyword">void</span> <span class="token function">detachInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// remove interrupt callback which was attached to update event</span>
    <span class="token keyword">bool</span> <span class="token function">hasInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//returns true if a timer rollover interrupt has already been set</span>
    <span class="token comment">//Add interrupt to capture/compare channel</span>
    <span class="token keyword">void</span> <span class="token function">attachInterrupt</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">,</span> callback_function_t callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Attach interrupt callback which will be called upon compare match event of specified channel</span>
    <span class="token keyword">void</span> <span class="token function">detachInterrupt</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// remove interrupt callback which was attached to compare match event of specified channel</span>
    <span class="token keyword">bool</span> <span class="token function">hasInterrupt</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//returns true if an interrupt has already been set on the channel compare match</span>
    <span class="token keyword">void</span> <span class="token function">timerHandleDeinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Timer deinitialization</span>

    <span class="token comment">// Refresh() is usefull while timer is running after some registers update</span>
    <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generate update event to force all registers (Autoreload, prescaler, compare) to be taken into account</span>

    <span class="token keyword">uint32_t</span> <span class="token function">getTimerClkFreq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return timer clock frequency in Hz.</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">captureCompareCallback</span><span class="token punctuation">(</span>TIM_HandleTypeDef <span class="token operator">*</span>htim<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Generic Caputre and Compare callback which will call user callback</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updateCallback</span><span class="token punctuation">(</span>TIM_HandleTypeDef <span class="token operator">*</span>htim<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Generic Update (rollover) callback which will call user callback</span>

    <span class="token comment">// The following function(s) are available for more advanced timer options</span>
    TIM_HandleTypeDef <span class="token operator">*</span><span class="token function">getHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return the handle address for HAL related configuration</span>
    <span class="token keyword">int</span> <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">getLLChannel</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">getIT</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">getAssociatedChannel</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>TIM_CCER_CC1NE<span class="token punctuation">)</span></span></span>
    <span class="token keyword">bool</span> isComplementaryChannel<span class="token punctuation">[</span>TIMER_CHANNELS<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式</h2><ol><li><code>HardwareTimer</code> 是一个 C++ 类，要做的第一件事是以 <code>TIM</code> 实例作为参数实例化一个对象。</li></ol><div class="hint-container note"><p class="hint-container-title">注</p><p>有些实例由 Servo、Tone 和 SoftSerial 使用（请参阅 TIMER_SERVO、TIMER_TONE 和 TIMER_SERIAL），但仅在使用时使用。只要确保与您自己的使用没有冲突即可。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>HardwareTimer <span class="token operator">*</span>MyTim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">HardwareTimer</span><span class="token punctuation">(</span>TIM3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// TIM3 is MCU hardware peripheral instance, its definition is provided in CMSIS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>然后就可以配置通道的模式。</li></ol><div class="hint-container note"><p class="hint-container-title">注</p><p>无需配置引脚模式（输出/输入/AlternateFunction），它将由 HardwareTimer 库自动完成。</p></div><div class="hint-container note"><p class="hint-container-title">注</p><p>通道范围[1..4]，但并非所有定时器都支持4个通道。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MyTim<span class="token operator">-&gt;</span><span class="token function">setMode</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> TIMER_OUTPUT_COMPARE_PWM1<span class="token punctuation">,</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>支持模式有：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>
  TIMER_DISABLED<span class="token punctuation">,</span>                         <span class="token comment">// == TIM_OCMODE_TIMING           no output, useful for only-interrupt</span>
  <span class="token comment">// Output Compare</span>
  TIMER_OUTPUT_COMPARE<span class="token punctuation">,</span>                   <span class="token comment">// == Obsolete, use TIMER_DISABLED instead. Kept for compatibility reason</span>
  TIMER_OUTPUT_COMPARE_ACTIVE<span class="token punctuation">,</span>            <span class="token comment">// == TIM_OCMODE_ACTIVE           pin is set high when counter == channel compare</span>
  TIMER_OUTPUT_COMPARE_INACTIVE<span class="token punctuation">,</span>          <span class="token comment">// == TIM_OCMODE_INACTIVE         pin is set low when counter == channel compare</span>
  TIMER_OUTPUT_COMPARE_TOGGLE<span class="token punctuation">,</span>            <span class="token comment">// == TIM_OCMODE_TOGGLE           pin toggles when counter == channel compare</span>
  TIMER_OUTPUT_COMPARE_PWM1<span class="token punctuation">,</span>              <span class="token comment">// == TIM_OCMODE_PWM1             pin high when counter &lt; channel compare, low otherwise</span>
  TIMER_OUTPUT_COMPARE_PWM2<span class="token punctuation">,</span>              <span class="token comment">// == TIM_OCMODE_PWM2             pin low when counter &lt; channel compare, high otherwise</span>
  TIMER_OUTPUT_COMPARE_FORCED_ACTIVE<span class="token punctuation">,</span>     <span class="token comment">// == TIM_OCMODE_FORCED_ACTIVE    pin always high</span>
  TIMER_OUTPUT_COMPARE_FORCED_INACTIVE<span class="token punctuation">,</span>   <span class="token comment">// == TIM_OCMODE_FORCED_INACTIVE  pin always low</span>

  <span class="token comment">//Input capture</span>
  TIMER_INPUT_CAPTURE_RISING<span class="token punctuation">,</span>             <span class="token comment">// == TIM_INPUTCHANNELPOLARITY_RISING</span>
  TIMER_INPUT_CAPTURE_FALLING<span class="token punctuation">,</span>            <span class="token comment">// == TIM_INPUTCHANNELPOLARITY_FALLING</span>
  TIMER_INPUT_CAPTURE_BOTHEDGE<span class="token punctuation">,</span>           <span class="token comment">// == TIM_INPUTCHANNELPOLARITY_BOTHEDGE</span>

  <span class="token comment">// Used 2 channels for a single pin. One channel in TIM_INPUTCHANNELPOLARITY_RISING another channel in TIM_INPUTCHANNELPOLARITY_FALLING.</span>
  <span class="token comment">// Channels must be used by pair: CH1 with CH2, or CH3 with CH4</span>
  <span class="token comment">// This mode is very useful for Frequency and Dutycycle measurement</span>
  TIMER_INPUT_FREQ_DUTY_MEASUREMENT<span class="token punctuation">,</span>

  TIMER_NOT_USED <span class="token operator">=</span> <span class="token number">0xFFFF</span>  <span class="token comment">// This must be the last item of this enum</span>
<span class="token punctuation">}</span> TimerModes_t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>然后就可以配置<code>PrescalerFactor</code>。定时器时钟将除以该因子（如果定时器时钟为 10Khz，预分频器因子为 2，则定时器将以 5kHz 计数）。</li></ol><div class="hint-container note"><p class="hint-container-title">注</p><p>将方法 <code>setOverflow</code> 与 <code>format == MICROSEC_FORMAT</code> 或 <code>format == HERTZ_FORMAT</code> 一起使用时，预分频器的配置是自动的。</p></div><div class="hint-container note"><p class="hint-container-title">注</p><p>预分频器用于定时器计数器，因此对所有通道都是通用的。</p></div><div class="hint-container note"><p class="hint-container-title">注</p><p>预分频器因子范围：[1..0x10000]（硬件寄存器范围为[0..0xFFFF]）。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MyTim<span class="token operator">-&gt;</span><span class="token function">setPrescaleFactor</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>然后就可以配置溢出（也称为翻转或更新）。</li></ol><p>对于输出，它对应于周期或频率。</p><p>对于输入捕获，建议使用最大值：0x10000，以避免在捕获发生之前发生翻转。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>将方法 setOverflow 与 format == MICROSEC_FORMAT 或 format == HERTZ_FORMAT 一起使用时，预分频器的配置是自动的。</p><p>溢出是所有通道共有的。</p><p>溢出范围：[1..0x10000]（硬件寄存器的范围为[0..0xFFFF]）。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MyTim<span class="token operator">-&gt;</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Default format is TICK_FORMAT. Rollover will occurs when timer counter counts 10000 ticks (it reach it count from 0 to 9999)</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> TICK_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> MICROSEC_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10000 microseconds</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> HERTZ_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 kHz</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>然后可以配置 CaptureCompare（通道特定的 CaptureCompare 寄存器）。</li></ol><div class="hint-container note"><p class="hint-container-title">注</p><p>CaptureCompare 仅适用于一个通道。</p><p>CaptureCompare 范围：[0.. 0xFFFF]</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MyTim<span class="token operator">-&gt;</span><span class="token function">setCaptureCompare</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Default format is TICK_FORMAT. 50 ticks</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setCaptureCompare</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> TICK_FORMAT<span class="token punctuation">)</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setCaptureCompare</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> MICROSEC_COMPARE_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50 microseconds    between counter resetand compare</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setCaptureCompare</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> HERTZ_COMPARE_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50 Hertz -&gt; 1/50    seconds between counterreset and compare</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setCaptureCompare</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> RESOLUTION_8B_COMPARE_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// used for    Dutycycle: [0.. 255]</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setCaptureCompare</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> RESOLUTION_12B_COMPARE_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// used for   Dutycycle: [0.. 4095]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以在更新中断（翻转）和/或捕获/比较中断上附加用户回调。如果未指定通道，则用户回调将附加到更新事件。请注意，更新中断标志 (UIF) 在更新事件发生并生成中断时设置，并在执行用户回调之前由 HAL 驱动程序自动清除。用户回调无需显式清除 UIF。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MyTim<span class="token operator">-&gt;</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span>Update_IT_callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Userdefined call back. See &#39;Examples&#39; chapter to see how to use callback with or without parameter</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> Compare_IT_callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Userdefined call back. See &#39;Examples&#39; chapter to see how to use callback with or without parameter</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>现在可以启动定时器了</li></ol><div class="hint-container note"><p class="hint-container-title">注</p><p>同一定时器的所有通道同时启动（因为每个定时器只有 1 个计数器）。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MyTim<span class="token operator">-&gt;</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>计时器可以暂停然后恢复</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MyTim<span class="token operator">-&gt;</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是完整 PWM 配置的示例:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MyTim<span class="token operator">-&gt;</span><span class="token function">setMode</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> TIMER_OUTPUT_COMPARE_PWM1<span class="token punctuation">,</span> pin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// MyTim-&gt;setPrescaleFactor(8); // Due to setOverflow with MICROSEC_FORMAT, prescaler   will be computedautomatically based on timer input clock</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setOverflow</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> MICROSEC_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10000 microseconds = 10 milliseconds</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setCaptureCompare</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> PERCENT_COMPARE_FORMAT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50%</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span>Update_IT_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> Compare_IT_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了简化基本 PWM 配置，提供了专用的一体化 API。溢出/频率以赫兹为单位，占空比以百分比为单位。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MyTim<span class="token operator">-&gt;</span><span class="token function">setPWM</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> pin<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// No callback required, we can   simplify the function call</span>
MyTim<span class="token operator">-&gt;</span><span class="token function">setPWM</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> pin<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5 Hertz, 10% dutycycle</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一些额外的 API 允许检索配置：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">getPrescaleFactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getOverflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">getCaptureCompare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// In InputCapture mode, this method doesn&#39;t retrieve configuration   but retrieve thecaptured counter value</span>
<span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，要使用中断回调：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">detachInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">注</p><p>一旦计时器启动并启用回调，您可以通过 <code>detachInterrupt</code> 和 <code>attachInterrupt</code> 自由禁用和启用回调，次数不限。但是，如果第一个 resume （= 计时器启动）在调用 <code>attachInterrupt</code> 之前完成，则 <code>HardwareTimer</code> 将无法稍后附加中断（出于性能原因，计时器将启动禁用中断）</p></div><p>如果在定时器运行时分离和附加中断，您还可以通过该方法知道是否已经附加了回调（无需在外部跟踪它）</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">hasInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,49),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","timer.html.vue"]]);export{d as default};
