import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e}from"./app-fbiCp83H.js";const t={},p=e(`<h2 id="about" tabindex="-1"><a class="header-anchor" href="#about" aria-hidden="true">#</a> About</h2><p>GPIO 是微控制器中最常用和通用的外设之一。 GPIO 通常用于写入和读取引脚状态。</p><p>GPIO代表通用输入输出，负责控制或读取数字世界中特定引脚的状态。例如，该外设广泛用于创建 LED 闪烁或读取简单的按钮。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>有些 GPIO 有特殊限制，并非所有 GPIO 都可以通过开发板访问。欲了解更多信息，请参阅相应的板引脚布局信息。</p></div><h2 id="gpio-模式" tabindex="-1"><a class="header-anchor" href="#gpio-模式" aria-hidden="true">#</a> GPIO 模式</h2><p>GPIO 配置有两种不同的模式：</p><ul><li>Input Mode （输入模式）</li></ul><p>在此模式下，GPIO 将从特定设备接收数字状态。该设备可以是按钮或开关。</p><ul><li>Output Mode （输出模式）</li></ul><p>对于输出模式，GPIO 会将 GPIO 数字状态更改为特定设备。例如，您可以驱动 LED。</p><h2 id="gpio-api" tabindex="-1"><a class="header-anchor" href="#gpio-api" aria-hidden="true">#</a> GPIO API</h2><p>以下是 GPIO 外设的常用函数。</p><h3 id="pinmode" tabindex="-1"><a class="header-anchor" href="#pinmode" aria-hidden="true">#</a> pinMode</h3><p><code>pinMode</code> 函数用于定义特定引脚的GPIO操作模式。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">pinMode</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> ulPin<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> ulMode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>ulPin</code>：要配置的引脚号。</p></li><li><p><code>ulMode</code>：要设置的模式。可以是以下值之一：</p><ul><li><code>INPUT</code>：输入模式。</li><li><code>OUTPUT</code>：输出模式。</li><li><code>INPUT_PULLUP</code>：输入模式，但是在引脚上启用内部上拉电阻。</li><li><code>INPUT_PULLDOWN</code>：输入模式，但是在引脚上启用内部下拉电阻。</li><li><code>INPUT_ANALOG</code>：模拟输入模式。</li><li><code>OUTPUT_OPEN_DRAIN</code>：输出模式，但是在引脚上启用开漏输出。</li></ul></li></ul><h3 id="内部上拉和下拉" tabindex="-1"><a class="header-anchor" href="#内部上拉和下拉" aria-hidden="true">#</a> 内部上拉和下拉</h3><p>PY32Duino 系列通过内部大约 40k 电阻支持内部上拉和下拉，可在将 GPIO 模式配置为 INPUT 模式时启用。如果未定义上拉或下拉模式，引脚将保持在高阻抗模式。</p><h3 id="digitalwrite" tabindex="-1"><a class="header-anchor" href="#digitalwrite" aria-hidden="true">#</a> digitalWrite</h3><p>函数 <code>digitalWrite</code> 将所选 GPIO 的状态设置为 HIGH 或 LOW 。仅当 <code>pinMode</code> 配置为 OUTPUT 时才使用此函数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">digitalWrite</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> ulPin<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> ulVal<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>ulPin</code>：要配置的引脚号。</p></li><li><p><code>ulVal</code>：要设置的值。可以是以下值之一：</p><ul><li><code>HIGH</code>：将引脚状态设置为高电平。</li><li><code>LOW</code>：将引脚状态设置为低电平。</li></ul></li></ul><h3 id="digitalread" tabindex="-1"><a class="header-anchor" href="#digitalread" aria-hidden="true">#</a> digitalRead</h3><p>要读取配置为 <code>INPUT</code> 的给定引脚的状态，请使用函数 <code>digitalRead</code>。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">digitalRead</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> ulPin<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>ulPin</code>：要配置的引脚号。</p></li><li><p>返回值：引脚状态。可以是以下值之一：</p><ul><li><code>HIGH</code>：引脚状态为高电平。</li><li><code>LOW</code>：引脚状态为低电平。</li></ul></li></ul><h2 id="interrupts-中断" tabindex="-1"><a class="header-anchor" href="#interrupts-中断" aria-hidden="true">#</a> Interrupts （中断）</h2><p>PY32Duino 上的 GPIO 外设支持中断。</p><h3 id="attachinterrupt" tabindex="-1"><a class="header-anchor" href="#attachinterrupt" aria-hidden="true">#</a> attachInterrupt</h3><p>函数 <code>attachInterrupt</code> 用于将中断附加到定义的引脚。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">attachInterrupt</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> pin<span class="token punctuation">,</span> callback_function_t callback<span class="token punctuation">,</span> <span class="token keyword">uint32_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>pin</code>：要配置的引脚号。</p></li><li><p><code>callback</code>：中断回调函数。</p></li><li><p><code>mode</code>：中断触发模式。可以是以下值之一：</p><ul><li><code>CHANGE</code>：引脚状态发生变化时触发中断。</li><li><code>RISING</code>：引脚状态从低电平变为高电平时触发中断。</li><li><code>FALLING</code>：引脚状态从高电平变为低电平时触发中断。</li><li><code>LOW</code>：引脚状态为低电平时触发中断。</li><li><code>HIGH</code>：引脚状态为高电平时触发中断。</li></ul></li></ul><h3 id="detachinterrupt" tabindex="-1"><a class="header-anchor" href="#detachinterrupt" aria-hidden="true">#</a> detachInterrupt</h3><p>要从特定引脚分离中断，请使用 <code>detachInterrupt</code> 函数来分离 GPIO。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">detachInterrupt</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> channel<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>channel</code>：要分离的引脚号。</li></ul><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><h3 id="gpio-输入和输出模式" tabindex="-1"><a class="header-anchor" href="#gpio-输入和输出模式" aria-hidden="true">#</a> GPIO 输入和输出模式</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">auto</span> LED <span class="token operator">=</span> PB0<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">auto</span> BUTTON <span class="token operator">=</span> PF4<span class="token punctuation">;</span>

<span class="token keyword">uint8_t</span> stateLED <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>BUTTON<span class="token punctuation">,</span>INPUT_PULLUP<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">digitalRead</span><span class="token punctuation">(</span>BUTTON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     stateLED <span class="token operator">=</span> stateLED<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>LED<span class="token punctuation">,</span>stateLED<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="gpio-中断" tabindex="-1"><a class="header-anchor" href="#gpio-中断" aria-hidden="true">#</a> GPIO 中断</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">auto</span> ledPin <span class="token operator">=</span> PB0<span class="token punctuation">;</span>
 
<span class="token keyword">const</span> <span class="token keyword">auto</span> interruptPin <span class="token operator">=</span> PF4<span class="token punctuation">;</span>  
 
<span class="token keyword">volatile</span> byte state <span class="token operator">=</span> LOW<span class="token punctuation">;</span>
 
<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">pinMode</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
  <span class="token function">pinMode</span><span class="token punctuation">(</span>interruptPin<span class="token punctuation">,</span> INPUT_PULLDOWN<span class="token punctuation">)</span><span class="token punctuation">;</span> 
 
  <span class="token function">attachInterrupt</span><span class="token punctuation">(</span><span class="token function">digitalPinToInterrupt</span><span class="token punctuation">(</span>interruptPin<span class="token punctuation">)</span><span class="token punctuation">,</span> blink<span class="token punctuation">,</span> CHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">digitalWrite</span><span class="token punctuation">(</span>ledPin<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">void</span> <span class="token function">blink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  state <span class="token operator">=</span> <span class="token operator">!</span>state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),i=[p];function c(o,l){return a(),s("div",null,i)}const r=n(t,[["render",c],["__file","gpio.html.vue"]]);export{r as default};
