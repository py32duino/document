import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as i,a as n,b as s,d as e,e as o}from"./app-fbiCp83H.js";const l="/assets/2023-10-05-01-11-32-nNws5NdN.png",u="/assets/2024-02-11-180751-mWxB-ZTH.jpg",r="/assets/2024-02-11-181028-akGbBRch.jpg",d="/assets/2023-10-05-01-23-50-m3AQfYtk.png",k="/assets/2024-02-11-182755-pidgJ3VH.jpg",g={},v=o('<h2 id="使用-vscode-的crotex-debug插件" tabindex="-1"><a class="header-anchor" href="#使用-vscode-的crotex-debug插件" aria-hidden="true">#</a> 使用 VSCode 的<code>Crotex-Debug</code>插件</h2><h3 id="先决条件" tabindex="-1"><a class="header-anchor" href="#先决条件" aria-hidden="true">#</a> 先决条件</h3><ul><li>安装 VSCode</li><li>有一个支持的调试器，可以是 JLink，ST-Link，CMSIS-DAP 等，这里我们使用 DAPLink 作为例子</li><li>安装 PY32Duino 的 SDK</li><li>安装<code>PyOCD</code></li></ul><h3 id="vscode-的配置" tabindex="-1"><a class="header-anchor" href="#vscode-的配置" aria-hidden="true">#</a> VSCode 的配置</h3><h4 id="安装插件" tabindex="-1"><a class="header-anchor" href="#安装插件" aria-hidden="true">#</a> 安装插件</h4>',5),m=n("code",null,"Cortex-Debug",-1),b={href:"https://marketplace.visualstudio.com/items?itemName=marus25.cortex-debug",target:"_blank",rel:"noopener noreferrer"},h={href:"https://marketplace.visualstudio.com/items?itemName=vsciot-vscode.vscode-arduino",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"Arduino",-1),_=n("code",null,"Arduino",-1),q=o(`<h4 id="安装-pyocd" tabindex="-1"><a class="header-anchor" href="#安装-pyocd" aria-hidden="true">#</a> 安装 PyOCD</h4><p>安装 PyOCD 比较简单，在拥有 Python 环境的情况下，直接输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">--pre</span> <span class="token parameter variable">-U</span> git+https://github.com/pyocd/pyOCD.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令安装最新版的PyOCD即可。</p><p>注意：py32目前并不在PyOCD的targets中，也不在develop中，因此，稍后我们需要下载CMSIS Pack用于调试。</p><h4 id="建立工程" tabindex="-1"><a class="header-anchor" href="#建立工程" aria-hidden="true">#</a> 建立工程</h4><p>不管是新建一个工程还是用之前老的工程都行，这里我们以新建工程为例。</p><p>点击<code>F1</code>按钮，输入<code>Arduino: Initialize</code></p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里输入文件名，需要注意的是，这个文件名必须和父目录的名字一样，我们这里就修改为<code>Py32DebugTest.ino</code>。</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>芯片型号我们以<code>Generic PY32F030 Series</code>为例。</p><p>建立完成之后，我们随便写一些测试代码，例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pinMode</span><span class="token punctuation">(</span>PB0<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>PB0<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">digitalWrite</span><span class="token punctuation">(</span>PB0<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 Arduino Board Configuration，我们选择如下的配置：</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',16),y={href:"https://py32.org/mcu/",target:"_blank",rel:"noopener noreferrer"},P=o(`<p>切记，Debug symbols and logs 选项中一定要选择有带<code>-g</code>的选项，这样才能生成调试符号。</p><h4 id="调试配置" tabindex="-1"><a class="header-anchor" href="#调试配置" aria-hidden="true">#</a> 调试配置</h4><p>在自动生成的<code>.vscode/arduino.json</code>文件中，我们需要添加一个属性<code>output</code>，这样才能获得编译出来的文件，一个典型的配置如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;sketch&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Py32DebugTest.ino&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;configuration&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UploadSpeed=115200,ClockSourceAndFrequency=HSI24M_HCLK48M,LowSpeedClockSource=None,xserial=generic,dbg=enable_sym,opt=osstd,SupplyVoltage=3V3,BootConnection=defaule,pnum=PY32F030x6&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;board&quot;</span><span class="token operator">:</span> <span class="token string">&quot;PY32Duino:PY32:GenF030&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们点击上方的<code>Upload</code>按钮，编译并上传代码。</p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来，我们需要配置调试器，点击<code>F1</code>按钮，输入<code>Debug: Add Configuration</code>（不是C/C++插件那个），然后选择<code>Cortex-Debug</code>。</p><p>这样，在<code>.vscode</code>文件夹下就会自动生成一个<code>launch.json</code>文件。</p>',8),x=o("<li><p>我们需要修改其中的<code>serverpath</code>属性为<code>pyocd</code></p></li><li><p>添加一个<code>armToolchainPath</code>属性，该属性的含义是一个<code>arm-none-eabi-gcc</code>套件的地址，需要注意的是其中需要包含 gdb，我们这里可以直接使用 PY32Duino sdk 自带的，可以从<code>.vscode\\c_cpp_properties.json</code>的<code>compilerPath</code>复制，但是注意最后的地方必须指向bin文件夹而不是exe。</p><p>比如：<code>C:\\\\Users\\\\YourUserName\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\PY32Duino\\\\tools\\\\xpack-arm-none-eabi-gcc\\\\13.2.1-1.1\\\\bin</code> [请注意Json中<code>\\</code>为转义符，请检查你的Json是否正确]</p></li><li><p>修改<code>executable</code>属性，属性的值为编译出来的 elf 文件的地址，我们这里使用<code>${workspaceRoot}/build/Py32DebugTest.ino.elf</code>。</p></li><li><p>修改<code>runToEntryPoint</code>属性，该属性为调试时自动运行到入口点，我们这里设置为<code>setup</code>。</p></li>",4),D={href:"https://py32.org/mcu/PY32F030xx.html#pack-mdk",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/decaday/PY32_Docs/tree/main/Pack",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,[n("p",null,[s("添加"),n("code",null,"cmsisPack"),s("，值设置为你下载的Pack路径，例如 "),n("code",null,"E:\\\\path\\\\to\\\\your\\\\pack\\\\Puya.PY32F0xx_DFP.1.1.9.pack")])],-1),Y=n("li",null,[n("p",null,[s("添加"),n("code",null,"targetId"),s("属性，属性的值为 pyocd 的 target，我们这里使用"),n("code",null,"py32f030x6"),s("。")])],-1),A=o(`<p>一个可能的<code>launch.json</code>文件如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Cortex Debug&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;cwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;executable&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceRoot}/build/Py32DebugTest.ino.elf&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cortex-debug&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;runToEntryPoint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;setup&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;servertype&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pyocd&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;targetId&quot;</span><span class="token operator">:</span> <span class="token string">&quot;py32f030x6&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;cmsisPack&quot;</span><span class="token operator">:</span> <span class="token string">&quot;E:\\\\path\\\\to\\\\your\\\\pack\\\\Puya.PY32F0xx_DFP.1.1.9.pack&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;armToolchainPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;C:\\\\Users\\\\YourUserName\\\\AppData\\\\Local\\\\Arduino15\\\\packages\\\\PY32Duino\\\\tools\\\\xpack-arm-none-eabi-gcc\\\\13.2.1-1.1\\\\bin&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们点击 vscode 左边的<code>运行与调试</code>图标，或者是直接按<code>F5</code>，就可以开始调试了。</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>享受调试的乐趣吧！</p>',5);function F(j,N){const a=p("ExternalLinkIcon");return c(),i("div",null,[v,n("p",null,[s("在 VSCode 的插件市场中搜索"),m,s("，或者在"),n("a",b,[s("https://marketplace.visualstudio.com/items?itemName=marus25.cortex-debug"),e(a)]),s("安装即可。")]),n("p",null,[s("同样，搜索 "),n("a",h,[f,e(a)]),s("，安装"),_,s("插件。")]),q,n("p",null,[s("最后一个芯片的具体型号（Board part number），比如32K ROM + 4K RAM应选择x6，64K ROM + 8K RAM应选择x8。**选择错误的flash大小可能会导致Hard Fault。**具体请参看数据手册："),n("a",y,[s("MCU 相关文档 | OpenPuya (py32.org)"),e(a)])]),P,n("ol",null,[x,n("li",null,[n("p",null,[s("下载PY32的CMSIS Pack（MDK Pack）："),n("a",D,[s("PY32F030 系列 | OpenPuya "),e(a)]),s("或 "),n("a",C,[s("PY32_Docs/Pack"),e(a)]),s(" ，放在任意位置均可，建议放在工程附近。")])]),S,Y]),A])}const O=t(g,[["render",F],["__file","Debug.html.vue"]]);export{O as default};
